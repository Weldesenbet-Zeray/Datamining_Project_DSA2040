# View summary
summary(transactions_1)
summary(transactions_2){r}
library(tidyverse)
library(dplyr)
library(lubridate)
data_1 <- read.csv("C:\\Users\\Admin\\OneDrive\\Documents\\SS_2025\\DSA2040\\Project_Dataset\\new_retail_data_2.csv")
data_1
data_2 <-read.csv("C:\\Users\\Admin\\OneDrive\\Documents\\SS_2025\\DSA2040\\Project_Dataset\\retail_data_1.csv")
data_2
colnames(data_2)
colnames(data_1)
set.seed(50000)
dataset_1 <- data_1 %>%
sample_n(50000)
write.csv(dataset_1,"sampled_dataset_1.csv",row.names=FALSE)
set.seed(50000)
dataset_2 <- data_2 %>%
sample_n(50000)
write.csv(dataset_2,"sampled_dataset_2.csv",row.names=FALSE)
necessary_columns_1 <- c("Transaction_ID", "Customer_ID", "Date", "Year", "Month", "Time", "Total_Purchases", "Amount", "Total_Amount", "Product_Category", "Product_Brand", "Product_Type", "products", "Payment_Method", "Shipping_Method", "Order_Status", "Ratings", "Customer_Segment", "Feedback")
necessary_columns_2 <- c("customer_id", "age", "gender", "income_bracket", "loyalty_program", "membership_years", "churned", "transaction_id", "transaction_date", "transaction_hour", "day_of_week", "month_of_year", "product_category", "product_name", "quantity", "unit_price", "discount_applied", "payment_method", "store_location", "total_sales", "total_transactions", "total_items_purchased", "avg_items_per_transaction", "purchase_frequency", "avg_transaction_value", "total_discounts_received", "preferred_store", "product_rating", "promotion_type", "promotion_channel", "customer_city", "customer_state", "distance_to_store", "email_subscriptions", "website_visits", "social_media_engagement", "days_since_last_purchase")
Data_1_sliced <- dataset_1 %>% select(all_of(necessary_columns_1))
Data_2_sliced <- dataset_2 %>% select(all_of(necessary_columns_2))
Data_1_sliced
Data_2_sliced
# Check structure and summary of dataset 1
str(Data_1_sliced)
#summary(Data_1_sliced)
# Check structure and summary of dataset 2
str(Data_2_sliced)
#summary(Data_2_sliced)
colSums(is.na(Data_1_sliced))
colSums(is.na(Data_2_sliced))
Data_1_sliced$Date <- as.Date(Data_1_sliced$Date, format="%m/%d/%Y")
#Find the Most Frequent (Mode) Date
most_frequent_date <- Data_1_sliced %>%
filter(!is.na(Date)) %>%
count(Date) %>%
arrange(desc(n)) %>%
slice(1) %>%
pull(Date)
print(most_frequent_date)  # Check the most frequent date
#Fill NA values in Date column with the most frequent date
Data_1_sliced$Date[is.na(Data_1_sliced$Date)] <- most_frequent_date
Data_1_sliced <- Data_1_sliced %>%
mutate(Year=ifelse(is.na(Year),year(Date),Year))   # Fill missing Year values
Data_1_sliced <- Data_1_sliced %>%
mutate(
# Fill Total_Amount if Amount & Total_Purchases exist
Total_Amount = ifelse(is.na(Total_Amount) & !is.na(Amount) & !is.na(Total_Purchases),
Amount * Total_Purchases, Total_Amount),
# Fill Amount if Total_Amount & Total_Purchases exist
Amount = ifelse(is.na(Amount) & !is.na(Total_Amount) & !is.na(Total_Purchases),
Total_Amount / Total_Purchases, Amount),
# Fill Total_Purchases if Total_Amount & Amount exist
Total_Purchases = ifelse(is.na(Total_Purchases) & !is.na(Total_Amount) & !is.na(Amount),
Total_Amount / Amount, Total_Purchases),
# If all are missing, fill with median
Amount = ifelse(is.na(Amount), median(Amount, na.rm = TRUE), Amount),
Total_Purchases = ifelse(is.na(Total_Purchases), median(Total_Purchases, na.rm = TRUE), Total_Purchases),
Total_Amount = ifelse(is.na(Total_Amount), median(Total_Amount, na.rm = TRUE), Total_Amount)
)
Data_1_sliced <- Data_1_sliced %>%
group_by(Customer_Segment) %>%
mutate(Ratings = ifelse(is.na(Ratings), round(mean(Ratings, na.rm = TRUE)), Ratings)) %>%
ungroup()
Data_1_sliced
Data_1_sliced <- Data_1_sliced %>%
group_by(Customer_Segment, Date, Total_Amount) %>%  # Group by similar known attributes
mutate(Customer_ID = ifelse(is.na(Customer_ID), first(na.omit(Customer_ID)), Customer_ID)) %>%
ungroup()
sum(is.na(Data_1_sliced$Customer_ID))
Data_1_sliced <- Data_1_sliced %>%
group_by(Customer_ID, Date, Total_Amount, Product_Category) %>%
mutate(Transaction_ID = ifelse(is.na(Transaction_ID), first(na.omit(Transaction_ID)), Transaction_ID)) %>%
ungroup()
sum(is.na(Data_1_sliced$Transaction_ID))
# Assign a new Customer_ID if still missing
Data_1_sliced$Customer_ID[is.na(Data_1_sliced$Customer_ID)] <-
max(Data_1_sliced$Customer_ID, na.rm = TRUE) + seq(1, sum(is.na(Data_1_sliced$Customer_ID)))
# Assign a new Transaction_ID if still missing
Data_1_sliced$Transaction_ID[is.na(Data_1_sliced$Transaction_ID)] <-
max(Data_1_sliced$Transaction_ID, na.rm = TRUE) + seq(1, sum(is.na(Data_1_sliced$Transaction_ID)))
sum(is.na(Data_1_sliced$Transaction_ID))
sum(is.na(Data_1_sliced$Customer_ID))
colSums(is.na(Data_1_sliced))
colSums(is.na(Data_2_sliced))
# Load necessary libraries
library(arules)
library(arulesViz)
# Convert products column into transaction format
transactions <- as(split(Data_1_sliced$products, Data_1_sliced$Transaction_ID), "transactions")
# View summary of transactions
summary(transactions)
table(table(data_1$Transaction_ID))
# For Dataset 1
cat("Dataset 1 Transaction Distribution:\n")
table(table(Data_1_sliced$Transaction_ID))
# For Dataset 2
cat("\nDataset 2 Transaction Distribution:\n")
table(table(Data_2_sliced$transaction_id))
# For Dataset 1
cat("data 1 Transaction Distribution:\n")
table(table(data_1$Transaction_ID))
# For Dataset 2
cat("\ndata 2 Transaction Distribution:\n")
table(table(data_2$transaction_id))
length(unique(data_2$product_name))  # Check unique product names
length(unique(data_2$product_id))  # Check unique product IDs
data_2$item_label <- paste(data_2$product_category, data_2$product_id, sep="_")
# Convert to transactions
transactions_2 <- as(split(data_2$item_label, data_2$transaction_id), "transactions")
# View summary
summary(transactions_2)
# Select necessary columns
data_1_selected <- data_1[, c("Transaction_ID", "products")]
data_2_selected <- data_2[, c("transaction_id", "product_id", "product_category")]
# Create a combined item label for data_2
data_2_selected$item_label <- paste(data_2_selected$product_category, data_2_selected$product_id, sep="_")
# Drop the original product_id and product_category columns (since we merged them)
data_2_selected <- data_2_selected[, c("transaction_id", "item_label")]
# View first few rows
head(data_1_selected)
head(data_2_selected)
# Count items per transaction
cat("Dataset 1 Transaction Distribution:\n")
table(table(data_1_selected$Transaction_ID))
cat("\nDataset 2 Transaction Distribution:\n")
table(table(data_2_selected$transaction_id))
# Check for missing values
cat("Missing values in Dataset 1:\n")
colSums(is.na(data_1_selected))
cat("\nMissing values in Dataset 2:\n")
colSums(is.na(data_2_selected))
# Remove rows with missing values
data_1_selected <- na.omit(data_1_selected)
data_2_selected <- na.omit(data_2_selected)
# Check for missing values
cat("Missing values in Dataset 1:\n")
colSums(is.na(data_1_selected))
cat("\nMissing values in Dataset 2:\n")
colSums(is.na(data_2_selected))
# Convert Dataset 1 to transaction format
transactions_1 <- as(split(data_1_selected$products, data_1_selected$Transaction_ID), "transactions")
# Convert Dataset 2 to transaction format
transactions_2 <- as(split(data_2_selected$item_label, data_2_selected$transaction_id), "transactions")
# View summary
summary(transactions_1)
summary(transactions_2){r}
# Load necessary libraries
library(arules)
library(arulesViz)
summary(transactions_2)
# For Dataset 2
cat("\nDataset 2 Transaction Distribution:\n")
table(table(Data_2_sliced$transaction_id))
# For Dataset 1
cat("Dataset 1 Transaction Distribution:\n")
table(table(Data_1_sliced$Transaction_ID))
# For Dataset 1
cat("data 1 Transaction Distribution:\n")
table(table(data_1$Transaction_ID))
# For Dataset 2
cat("\ndata 2 Transaction Distribution:\n")
table(table(data_2$transaction_id))
data_2$item_label <- paste(data_2$product_category, data_2$product_id, sep="_")
# Convert to transactions
transactions_2 <- as(split(data_2$item_label, data_2$transaction_id), "transactions")
# View summary
summary(transactions_2)
head(data_2_selected)
# Count items per transaction
cat("Dataset 1 Transaction Distribution:\n")
table(table(data_1_selected$Transaction_ID))
cat("\nDataset 2 Transaction Distribution:\n")
table(table(data_2_selected$transaction_id))
# Check for missing values
cat("Missing values in Dataset 1:\n")
colSums(is.na(data_1_selected))
cat("\nMissing values in Dataset 2:\n")
colSums(is.na(data_2_selected))
# Remove rows with missing values
data_1_selected <- na.omit(data_1_selected)
data_2_selected <- na.omit(data_2_selected)
# Check for missing values
cat("Missing values in Dataset 1:\n")
colSums(is.na(data_1_selected))
cat("\nMissing values in Dataset 2:\n")
colSums(is.na(data_2_selected))
# Convert Dataset 1 to transaction format
transactions_1 <- as(split(data_1_selected$products, data_1_selected$Transaction_ID), "transactions")
# Convert Dataset 2 to transaction format
transactions_2 <- as(split(data_2_selected$item_label, data_2_selected$transaction_id), "transactions")
# View summary
summary(transactions_1)
summary(transactions_2)
